{
  "_id": "iGfEgItTVxAJy0ty",
  "name": "Actor Prototype Token Movement",
  "type": "script",
  "author": "PFC6ARcHZsYmZ7YK",
  "command": "// This macro updates all actors' and tokens' movement actions based on the base actor's main movement\n\nif (game.user.isGM) {\n  // Sidebar Actors\n  for (const actor of game.actors) {\n    updateActor(actor);\n  }\n  \n  // Tokens on Scenes\n  for (const scene of game.scenes) {\n    console.log(`Updating tokens on scene ${scene.name}.`);\n    for (const token of scene.tokens) {\n      updateToken(token);\n    }\n  }\n} else {\n  console.log(\"User is not a GM, can't run macro.\");\n}\n\n\nfunction updateActor(actor) {\n  let movementAction = \"\";\n  if (actor.type === \"starship\") {\n    movementAction = \"fly\";\n    actor.update({\"prototypeToken.movementAction\": movementAction});\n  }\n  else if (actor.type === \"vehicle\") {\n    movementAction = null;\n    actor.update({\"prototypeToken.movementAction\": movementAction});\n    console.log(`Actor ${actor.name} movement updated to ${movementAction}`);\n  }\n  else if (actor.type === \"drone\") {\n    const chassis = actor.items.filter(item => item.type === \"chassis\")[0];\n    movementAction = CONFIG.SFRPG.movementOptions[chassis.system.speed.mainMovement];\n    actor.update({\"prototypeToken.movementAction\": movementAction});\n  }\n  else {\n    movementAction = CONFIG.SFRPG.movementOptions[actor.system.attributes.speed.mainMovement];\n    actor.update({\"prototypeToken.movementAction\": movementAction});\n  }\n  console.log(`Actor ${actor.name} movement updated to ${movementAction}`);\n}\n\nfunction updateToken(token) {\n  const actor = token.actor;\n  let movementAction = \"\";\n  if (actor) {\n    if (actor.type === \"starship\") {\n      movementAction = \"fly\";\n      token.update({\"movementAction\": movementAction});\n    }\n    else if (actor.type === \"vehicle\") {\n      movementAction = null;\n      token.update({\"movementAction\": movementAction});\n    }\n    else if (actor.type === \"drone\") {\n      const chassis = actor.items.filter(item => item.type === \"chassis\")[0];\n      movementAction = CONFIG.SFRPG.movementOptions[chassis.system.speed.mainMovement];\n      token.update({\"movementAction\": movementAction});\n    }\n    else {\n      movementAction = CONFIG.SFRPG.movementOptions[actor.system.attributes.speed.mainMovement];\n      token.update({\"movementAction\": movementAction});\n    }\n    console.log(`Token ${token.name} movement updated to ${movementAction}`);\n  } else {\n    console.error(`Token ${token.name} has non-existent actor, movement not set.`);\n  }\n}",
  "img": "icons/svg/wingfoot.svg",
  "scope": "global"
}